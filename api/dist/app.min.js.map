{"version":3,"sources":["app.js"],"names":["express","require","app","bodyParser","List","User","jwt","swaggerUi","mongoose","path","cors","use","Task","swaggerDefinition","openapi","title","swaggerJsdoc","securitySchemes","bearerAuth","type","scheme","in","info","version","swaggerSpecs","options","bearerFormat","serve","setup","json","apis","req","res","next","header","authenticate","token","verify","getJWTSecret","err","decoded","status","send","user_id","_id","authenticateAdmin","findById","then","user","checkIfAdmin","verifySession","findByIdAndToken","reject","refreshToken","Promise","error","sessions","forEach","session","isSessionValid","hasRefreshTokenExpired","expiresAt","e","get","find","_userId","lists","post","listDoc","body","save","patch","findOneAndUpdate","params","id","$set","message","findOneAndRemove","removedListDoc","deleteTasksFromList","_listId","listId","tasks","findOne","canCreateTask","list","newTaskDoc","taskId","sendStatus","canUpdateTasks","removedTaskDoc","newUser","createSession","generateAccessAuthToken","accessToken","authTokens","email","password","findByCredentials","userObject","userId","changePw","put","users","changeEmail","newEmail","makeAdmin","deletedUser","newTask","console","process","listen","server","deleteMany","log","env","NODE_ENV","join","__dirname","sendFile","resolve","module","exports"],"mappings":"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","file":"app.min.js","sourcesContent":["const express = require('express');\r\nconst app = express();\r\nconst { mongoose } = require('./db/mongoose');\r\nconst bodyParser = require('body-parser');\r\nconst { List, Task , User } = require('./db/models');\r\nconst jwt = require('jsonwebtoken');\r\nconst swaggerUi = require(\"swagger-ui-express\");\r\nconst swaggerJsdoc = require(\"swagger-jsdoc\");\r\nconst path = require('path');\r\n\r\nvar cors = require('cors');\r\napp.use(cors())\r\n\r\nconst options = {\r\n  swaggerDefinition: {\r\n    openapi: \"3.0.1\",\r\n    info: {\r\n      title: \"TaskManager in swagger\",\r\n      version: \"1.0.0\",\r\n    },\r\n      components: {\r\n      securitySchemes: {\r\n        bearerAuth: {\r\n          type: \"http\",\r\n          scheme: \"bearer\",\r\n           in: \"header\",\r\n          bearerFormat: \"JWT\",\r\n        },\r\n      },\r\n    },\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n  },\r\n  apis: [\"app.js\"],\r\n};\r\n\r\nconst swaggerSpecs = swaggerJsdoc(options);\r\napp.use(\"/api-docs\", swaggerUi.serve, swaggerUi.setup(swaggerSpecs));\r\n\r\n/* MIDDLEWARE  */\r\n\r\n// Load middleware\r\napp.use(bodyParser.json());\r\n\r\n// CORS HEADERS MIDDLEWARE\r\napp.use(function (req, res, next) {\r\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n    res.header(\"Access-Control-Allow-Methods\", \"GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE\");\r\n    res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, x-access-token, x-refresh-token, _id\");\r\n\r\n    res.header(\r\n        'Access-Control-Expose-Headers',\r\n        'x-access-token, x-refresh-token'\r\n    );\r\n\r\n    next();\r\n});\r\n\r\n\r\n// check whether the request has a valid JWT access token\r\nlet authenticate = (req, res, next) => {\r\n    let token = req.header('x-access-token');\r\n    \r\n    // verify the JWT\r\n    jwt.verify(token, User.getJWTSecret(), (err, decoded) => {\r\n        if (err) {\r\n            // there was an error\r\n            // jwt is invalid - * DO NOT AUTHENTICATE *\r\n            res.status(401).send(err);\r\n        } else {\r\n            // jwt is valid\r\n            req.user_id = decoded._id;\r\n            next();\r\n        }\r\n    });\r\n}\r\n\r\n// check whether the request has a valid admin JWT access token\r\nlet authenticateAdmin = (req, res, next) => {\r\n    let token = req.header('x-access-token');\r\n    \r\n    // verify the JWT\r\n    jwt.verify(token, User.getJWTSecret(), (err, decoded) => {\r\n        if (err) {\r\n            // there was an error\r\n            // jwt is invalid - * DO NOT AUTHENTICATE *\r\n            res.status(401).send(err);\r\n        } else {\r\n            // jwt is valid\r\n            req.user_id = decoded._id;\r\n            User.findById(req.user_id).then((user) => {\r\n                if (!user.checkIfAdmin()){\r\n                    // return Promise.reject({\r\n                        // 'error' : 'User does not have admin privileges!!'\r\n                    // });\r\n                    // there was an error\r\n                    // jwt is invalid - * DO NOT AUTHENTICATE *\r\n                    res.status(401).send(\"User does not have admin privileges!!\");\r\n                }\r\n                else{\r\n                    next();\r\n                    // return Promise.resolve();\r\n                }\r\n            })\r\n        }\r\n    });\r\n}\r\n\r\n// Verify Refresh Token Middleware (which will be verifying the session)\r\nlet verifySession = (req, res, next) => {\r\n    // grab the refresh token from the request header\r\n    let refreshToken = req.header('x-refresh-token');\r\n\r\n    // grab the _id from the request header\r\n    let _id = req.header('_id');\r\n\r\n    User.findByIdAndToken(_id, refreshToken).then((user) => {\r\n        if (!user) {\r\n            // user couldn't be found\r\n            return Promise.reject({\r\n                'error': 'User not found. Make sure that the refresh token and user id are correct'\r\n            });\r\n        }\r\n\r\n         // if the code reaches here - the user was found\r\n        // therefore the refresh token exists in the database - but we still have to check if it has expired or not\r\n\r\n        req.user_id = user._id;\r\n        req.userObject = user;\r\n        req.refreshToken = refreshToken;\r\n\r\n        let isSessionValid = false;\r\n\r\n        user.sessions.forEach((session) => {\r\n            if (session.token === refreshToken) {\r\n                // check if the session has expired\r\n                if (User.hasRefreshTokenExpired(session.expiresAt) === false) {\r\n                    // refresh token has not expired\r\n                    isSessionValid = true;\r\n                }\r\n            }\r\n        });\r\n\r\n        if (isSessionValid) {\r\n            // the session is VALID - call next() to continue with processing this web request\r\n            next();\r\n        } else {\r\n            // the session is not valid\r\n            return Promise.reject({\r\n                'error': 'Refresh token has expired or the session is invalid'\r\n            })\r\n        }\r\n\r\n    }).catch((e) => {\r\n        res.status(401).send(e);\r\n    })\r\n}\r\n\r\n/* END MIDDLEWARE  */\r\n\r\n\r\n /**\r\n * @swagger\r\n * /lists:\r\n *    get:\r\n *      tags:\r\n *        - Lists\r\n *      description: Get List\r\n *      summary: Get List\r\n *      responses:\r\n *          lists:\r\n *              description: This is the default response for it\r\n  */\r\n\r\n/* LIST ROUTES */ \r\n/**\r\n * GET /lists\r\n * Purpose: Get all lists\r\n */\r\napp.get('/lists', authenticate, (req, res) => {\r\n// We want to return an array of all the lists in the database that belong to the authenticated user\r\n\t\r\n    List.find({\r\n        _userId: req.user_id\r\n    }).then((lists) => {\r\n        res.send(lists);\r\n       }).catch((e) => {\r\n        res.send(e);\r\n});\r\n})\r\n\r\n/**\r\n * @swagger\r\n * /lists:\r\n *    post:\r\n *      tags:\r\n *        - Lists\r\n *      description: Create New List\r\n *      summary: Create New List\r\n *      requestBody:\r\n *        required: true\r\n *        content:\r\n *          application/json:\r\n *            schema:\r\n *              type: object\r\n *              properties:\r\n *                _userId:\r\n *                  type: string\r\n *                  description: enter your userId\r\n *                title:\r\n *                  type: string\r\n *                  description: enter your List Title\r\n  *      responses:\r\n *        200:\r\n *          description: Successfully created ;ist\r\n *          content:\r\n *            application/json:\r\n *              schema:\r\n *                type: object\r\n *                properties:\r\n *                  description:\r\n *                    type: string\r\n *               \r\n *                \r\n */           \r\n/**\r\n\r\n/**\r\n * post /lists\r\n * Purpose: create a new list\r\n */\r\n\r\napp.post('/lists', authenticate, (req, res) => {\r\n// We want to create a new list and return the new list document back to the user (which includes the id)\r\n    // The list information (fields) will be passed in via the JSON request body\t\r\n    let title = req.body.title;\r\n\r\n    let newList = new List({\r\n        title,\r\n        _userId: req.user_id\r\n          });\r\n\r\n    newList.save().then((listDoc) => {\r\n        // the full list document is returned (incl. id)\r\n        res.send(listDoc);\r\n    })\r\n    });\r\n\r\n    /**\r\n * PATCH /lists/:id\r\n * Purpose: Update a specified list\r\n */\r\napp.patch('/lists/:id', authenticate, (req, res) => {\r\n    // We want to update the specified list (list document with id in the URL) with the new values specified in the JSON body of the request\r\n   List.findOneAndUpdate({ _id: req.params.id, _userId: req.user_id }, {\r\n        $set: req.body\r\n    }).then(() => {\r\n        res.send({ 'message': 'updated successfully'});\r\n    });\r\n\r\n    });\r\n\r\n\r\n    /**\r\n * @swagger\r\n * /lists/:id:\r\n *    delete:\r\n *      tags:\r\n *        - Delete\r\n *      summary: Remove List API  \r\n *      parameters:\r\n *        - name: id\r\n *          in: path\r\n *          required: true\r\n *          description: List id\r\n *          schema:\r\n *            type: string\r\n *      responses:\r\n *        200:\r\n *          description: Successfully deleted data\r\n *          content:\r\n *            application/json:\r\n *              schema:\r\n *                type: object\r\n *                properties:\r\n *                  description:\r\n *                    type: string \r\n *                    example: Successfully deleted data! \r\n */\r\n\r\n\r\n   /**\r\n * DELETE /lists/:id\r\n * Purpose: Delete a list\r\n */\r\napp.delete('/lists/:id', authenticate, (req, res) => {\r\n    // We want to delete the specified list (document with id in the URL)\r\n    List.findOneAndRemove({\r\n        _id: req.params.id,\r\n        _userId: req.user_id\r\n           }).then((removedListDoc) => {\r\n        res.send(removedListDoc);\r\n\r\n        // delete all tasks in deleted list\r\n        deleteTasksFromList(removedListDoc._id);\r\n\r\n           })\r\n});\r\n\r\n/**\r\n * GET /lists/:listId/tasks\r\n * Purpose: Get all tasks in a specific list\r\n */\r\napp.get('/lists/:listId/tasks', authenticate, (req, res) => {\r\n    // We want to return all tasks that belong to a specific list (specified by listId)\r\n    Task.find({\r\n        _listId: req.params.listId\r\n    }).then((tasks) => {\r\n        res.send(tasks);\r\n    })\r\n});\r\n\r\n\r\n/**\r\n * @swagger\r\n * /lists/:listId/tasks:\r\n *    post:\r\n *      tags:\r\n *        - Tasks\r\n *      description: Create New Task\r\n *      summary: Create New Task\r\n *      requestHeader:\r\n *        required: true\r\n *        content:\r\n *          application/json:\r\n *            schema:\r\n *              type: object\r\n *              properties:\r\n *                _listId:\r\n *                  type: string\r\n *      requestBody:\r\n *        required: true\r\n *        content:\r\n *          application/json:\r\n *            schema:\r\n *              type: object\r\n *              properties:\r\n *                _listId:\r\n *                  type: string\r\n *                  description: enter your listId\r\n *                title:\r\n *                  type: string\r\n *                  description: enter your task Title\r\n  *      responses:\r\n *        200:\r\n *          description: Successfully created Task\r\n *          content:\r\n *            application/json:\r\n *              schema:\r\n *                type: object\r\n *                properties:\r\n *                  description:\r\n *                    type: string\r\n *                    example: Successfully created Task! \r\n */           \r\n\r\n/**\r\n * POST /lists/:listId/tasks\r\n * Purpose: Create a new task in a specific list\r\n */\r\napp.post('/lists/:listId/tasks', authenticate, (req, res) => {\r\n    // We want to create a new task in a list specified by listId\r\n\r\n    List.findOne({\r\n        _id: req.params.listId,\r\n        _userId: req.user_id\r\n    }).then((list) => {\r\n        if(list) {\r\n            // list object with spec. conditions valid\r\n            // currently authenticated user can create new tasks\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }).then((canCreateTask) => {\r\n        if(canCreateTask) {\r\n            let newTask = new Task({\r\n                title: req.body.title,\r\n                _listId: req.params.listId\r\n            });\r\n            newTask.save().then((newTaskDoc) => {\r\n                res.send(newTaskDoc);\r\n            })\r\n        }\r\n        else {\r\n            res.sendStatus(404);\r\n        }\r\n    })\r\n})\r\n\r\n/**\r\n * PATCH /lists/:listId/tasks/:taskId\r\n * Purpose: Update an existing task\r\n */\r\napp.patch('/lists/:listId/tasks/:taskId', authenticate, (req, res) => {\r\n    // We want to update an existing task (specified by taskId)\r\n\r\n    List.findOne({\r\n        _id: req.params.listId,\r\n        _userId: req.user_id\r\n    }).then((list) => {\r\n        if(list) {\r\n            // list object with spec. conditions valid\r\n            // currently authenticated user can update tasks within list\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }).then((canUpdateTasks) => {\r\n        if (canUpdateTasks){\r\n            Task.findOneAndUpdate({\r\n                _id: req.params.taskId,\r\n                _listId: req.params.listId\r\n            }, {\r\n                    $set: req.body\r\n                }\r\n            ).then(() => {\r\n                res.send({ message: 'Updated successfully.' })\r\n            })\r\n        } else {\r\n            res.sendStatus(404);\r\n        }\r\n    })\r\n\r\n                \r\n          });\r\n/**\r\n * @swagger\r\n * lists/:listId/tasks/:\r\n *    delete:\r\n *      tags:\r\n *        - Delete\r\n *      summary: Remove Task API  \r\n *      parameters:\r\n *        - name: Taskid\r\n *          in: path\r\n *          required: true\r\n *          description: Task id\r\n *          schema:\r\n *            type: string\r\n  *        - name: Listid\r\n *          in: path\r\n *          required: true\r\n *          description: list id\r\n *          schema:\r\n *            type: string\r\n *      responses:\r\n *        200:\r\n *          description: Successfully deleted task\r\n *          content:\r\n *            application/json:\r\n *              schema:\r\n *                type: object\r\n *                properties:\r\n *                  description:\r\n *                    type: string\r\n *                    example: Successfully deleted task!     \r\n */\r\n\r\n\r\n\r\n/**\r\n * DELETE /lists/:listId/tasks/:taskId\r\n * Purpose: Delete a task\r\n */\r\napp.delete('/lists/:listId/tasks/:taskId', authenticate, (req, res) => {\r\n\r\n    List.findOne({\r\n        _id: req.params.listId,\r\n        _userId: req.user_id\r\n    }).then((list) => {\r\n        if(list) {\r\n            // list object with spec. conditions valid\r\n            // currently authenticated user can update tasks within list\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }).then((canUpdateTasks) => {\r\n        if (canUpdateTasks) {\r\n            Task.findOneAndRemove({\r\n                _id: req.params.taskId,\r\n                _listId: req.params.listId\r\n            }).then((removedTaskDoc) => {\r\n                res.send(removedTaskDoc);\r\n            })\r\n        \r\n    } else {\r\n        res.sendStatus(404);\r\n    }})\r\n        }\r\n\r\n    );\r\n    \r\n/* USER ROUTES */\r\n\r\n/**\r\n * @swagger\r\n * /users:\r\n *    post:\r\n *      tags:\r\n *        - Users\r\n *      description: Create users API\r\n *      summary: Create users data\r\n *      requestBody:\r\n *        required: true\r\n *        content:\r\n *          application/json:\r\n *            schema:\r\n *              type: object\r\n *              properties:\r\n *                email:\r\n *                  type: string\r\n *                  description: enter your username\r\n *                password:\r\n *                  type: string\r\n *                  description: enter your password\r\n  *      responses:\r\n *        200:\r\n *          description: Successfully created User\r\n *          content:\r\n *            application/json:\r\n *              schema:\r\n *                type: object\r\n *                properties:\r\n *                  description:\r\n *                    type: string\r\n *                    example: Successfully created User! \r\n *                \r\n */           \r\n\r\n/**\r\n * POST /users\r\n * Purpose: Sign up\r\n */\r\napp.post('/users', (req, res) => {\r\n    // User sign up\r\n\r\n    let body = req.body;\r\n    let newUser = new User(body);\r\n\r\n    newUser.save().then(() => {\r\n        return newUser.createSession();\r\n    }).then((refreshToken) => {\r\n        // Session created successfully - refreshToken returned.\r\n        // now we geneate an access auth token for the user\r\n\r\n        return newUser.generateAccessAuthToken().then((accessToken) => {\r\n            // access auth token generated successfully, now we return an object containing the auth tokens\r\n            return { accessToken, refreshToken }\r\n        });\r\n    }).then((authTokens) => {\r\n        // Now we construct and send the response to the user with their auth tokens in the header and the user object in the body\r\n        res\r\n            .header('x-refresh-token', authTokens.refreshToken)\r\n            .header('x-access-token', authTokens.accessToken)\r\n            .send(newUser);\r\n    }).catch((e) => {\r\n        res.status(400).send(e);\r\n    })\r\n})\r\n\r\n /**\r\n * @swagger\r\n * /users/login/:\r\n *    post:\r\n *      tags:\r\n *        - Users\r\n *      description: Login and Get Access Token\r\n *      summary: Login and Get Access Token\r\n *      requestBody:\r\n *        required: true\r\n *        content:\r\n *          application/json:\r\n *            schema:\r\n *              type: object\r\n *              properties:\r\n *                email:\r\n *                  type: string\r\n *                  description: enter your username\r\n *                password:\r\n *                  type: string\r\n *                  description: enter your password\r\n  *      responses:\r\n *        200:\r\n *          description: Successfully Logged in\r\n *          content:\r\n *            application/json:\r\n *              schema:\r\n *                type: object\r\n *                properties:\r\n *                  description:\r\n *                    type: string\r\n *                    example: Successfully Logged in!\r\n *                \r\n */           \r\n\r\n/**\r\n * POST /users/login\r\n * Purpose: Login\r\n */\r\napp.post('/users/login', (req, res) => {\r\n    let email = req.body.email;\r\n    let password = req.body.password;\r\n\r\n    User.findByCredentials(email, password).then((user) => {\r\n        return user.createSession().then((refreshToken) => {\r\n            // Session created successfully - refreshToken returned.\r\n            // now we geneate an access auth token for the user\r\n\r\n            return user.generateAccessAuthToken().then((accessToken) => {\r\n                // access auth token generated successfully, now we return an object containing the auth tokens\r\n                return { accessToken, refreshToken }\r\n            });\r\n        }).then((authTokens) => {\r\n            // Now we construct and send the response to the user with their auth tokens in the header and the user object in the body\r\n            res\r\n                .header('x-refresh-token', authTokens.refreshToken)\r\n                .header('x-access-token', authTokens.accessToken)\r\n                .send(user);\r\n        })\r\n    }).catch((e) => {\r\n        res.status(400).send(e);\r\n    });\r\n})\r\n\r\n/**\r\n * GET /users/me/access-token\r\n * Purpose: generates and returns an access token\r\n */\r\napp.get('/users/me/access-token', verifySession, (req, res) => {\r\n    // we know that the user/caller is authenticated and we have the user_id and user object available to us\r\n    req.userObject.generateAccessAuthToken().then((accessToken) => {\r\n        res.header('x-access-token', accessToken).send({ accessToken });\r\n    }).catch((e) => {\r\n        res.status(400).send(e);\r\n    });\r\n})\r\n\r\n/**\r\n * PUT /users/:userId\r\n * Purpose: change password\r\n */\r\napp.put('/users/:userId', authenticate, (req, res) => {\r\n    // we authenticate before allowing change pw\r\n\r\n    User.findOne({\r\n        _id: req.params.userId\r\n    }).then((user) => {\r\n        user.changePw(req.body.password);\r\n        // console.log(\"and back here as well\");\r\n        res.sendStatus(200);\r\n    })\r\n})\r\n\r\n/**\r\n * ONLY FOR TESTING PURPOSES\r\n * GET /users/:userId\r\n * Purpose: view password\r\n */\r\napp.get('/users/:userId', (req, res) => {\r\n    // for testing change pw feature\r\n\r\n    User.findOne({\r\n        _id: req.params.userId\r\n    }).then((user) => {\r\n        body = {\r\n            \"email\": user.email,\r\n            \"password\": user.password\r\n        }\r\n        res.send(body);\r\n    })\r\n\r\n})\r\n\r\n/* ADMIN ROUTES */\r\n\r\n/**\r\n * GET /admin\r\n * Purpose: check if user is admin\r\n */\r\napp.get('/admin', authenticateAdmin, (req, res) => {\r\n    // authenticateAdmin does all the work\r\n    res.status(200).send(\"User has admin privileges.\");\r\n})\r\n\r\n/**\r\n * GET /users\r\n * Purpose: get all users\r\n */\r\napp.get('/users', authenticateAdmin, (req, res) => {\r\n    // for retrieving all users\r\n    User.find({}).then((users) => {\r\n        res.send(users);\r\n    })\r\n})\r\n\r\n/**\r\n * PUT admin/users/:userId/change-password\r\n * Purpose: admin change password\r\n */\r\napp.put('/admin/users/:userId/change-password', authenticateAdmin, (req, res) => {\r\n    // we authenticate admin before allowing change pw\r\n\r\n    User.findOne({\r\n        _id: req.params.userId\r\n    }).then((user) => {\r\n        user.changePw(req.body.password);\r\n        // console.log(\"and back here as well\");\r\n        res.status(200).send(user);\r\n    })\r\n})\r\n\r\n/**\r\n * PUT admin/users/:userId/change-email\r\n * Purpose: admin change email\r\n */\r\napp.put('/admin/users/:userId/change-email', authenticateAdmin, (req, res) => {\r\n    // we authenticate admin before allowing change email\r\n    User.findOne({\r\n        _id: req.params.userId\r\n    }).then((user) => {\r\n        user.changeEmail(req.body.newEmail);\r\n        // console.log(\"and back here as well\");\r\n        res.status(200).send(user);\r\n    })\r\n})\r\n\r\n/**\r\n * POST admin/users/:userId/make-admin\r\n * Purpose: make user admin\r\n */\r\napp.post('/admin/users/:userId/make-admin', authenticateAdmin, (req, res) => {\r\n    // we authenticate admin before allowing make admin\r\n    User.findOne({\r\n        _id: req.params.userId\r\n    }).then((user) => {\r\n        user.makeAdmin();\r\n        // console.log(\"and back here as well\");\r\n        res.status(200).send(user);\r\n    })\r\n})\r\n\r\n/**\r\n * DELETE /users/:userId\r\n * Purpose: delete user\r\n */\r\napp.delete('/admin/users/:userId/delete-user', authenticateAdmin, (req, res) => {\r\n    // we authenticate admin before allowing change email\r\n    User.findOneAndRemove({\r\n        _id: req.params.userId\r\n    }).then((deletedUser) => {\r\n        res.send(deletedUser);\r\n    })\r\n})\r\n\r\n/* ADMIN LIST ROUTES */\r\n\r\n/**\r\n * GET /admin/:userId/lists\r\n * Purpose: Get all lists\r\n */\r\napp.get('/admin/:userId/lists', authenticateAdmin, (req, res) => {\r\n    // We want to return an array of all the lists in the database that belong to the user\r\n        \r\n        List.find({\r\n            _userId: req.params.userId\r\n        }).then((lists) => {\r\n            res.send(lists);\r\n           }).catch((e) => {\r\n            res.send(e);\r\n    });\r\n})\r\n    \r\n/**\r\n * POST /admin/:userId/lists\r\n * Purpose: create a new list\r\n */\r\n\r\napp.post('/admin/:userId/lists', authenticateAdmin, (req, res) => {\r\n// We want to create a new list and return the new list document back to the user (which includes the id)\r\n    // The list information (fields) will be passed in via the JSON request body\t\r\n    let title = req.body.title;\r\n\r\n    let newList = new List({\r\n        title,\r\n        _userId: req.params.userId\r\n            });\r\n\r\n    newList.save().then((listDoc) => {\r\n        // the full list document is returned (incl. id)\r\n        res.send(listDoc);\r\n    })\r\n    });\r\n\r\n/**\r\n * PATCH /admin/:userId/lists/:id\r\n * Purpose: Update a specified list\r\n */\r\napp.patch('/admin/:userId/lists/:id', authenticateAdmin, (req, res) => {\r\n    // We want to update the specified list (list document with id in the URL) with the new values specified in the JSON body of the request\r\n    List.findOneAndUpdate({ _id: req.params.id, _userId: req.params.userId }, {\r\n        $set: req.body\r\n    }).then(() => {\r\n        res.send({ 'message': 'updated successfully'});\r\n    });\r\n\r\n    });\r\n\r\n/**\r\n * DELETE /admin/:userId/lists/:id\r\n * Purpose: Delete a list\r\n */\r\napp.delete('/admin/:userId/lists/:id', authenticateAdmin, (req, res) => {\r\n    // We want to delete the specified list (document with id in the URL)\r\n    List.findOneAndRemove({\r\n        _id: req.params.id,\r\n        _userId: req.params.userId\r\n            }).then((removedListDoc) => {\r\n        res.send(removedListDoc);\r\n\r\n        // delete all tasks in deleted list\r\n        deleteTasksFromList(removedListDoc._id);\r\n\r\n            })\r\n});\r\n\r\n/**\r\n * GET /admin/:userId/lists/:listId/tasks\r\n * Purpose: Get all tasks in a specific list\r\n */\r\napp.get('/admin/lists/:listId/tasks', authenticateAdmin, (req, res) => {\r\n    // We want to return all tasks that belong to a specific list (specified by listId)\r\n    Task.find({\r\n        _listId: req.params.listId\r\n    }).then((tasks) => {\r\n        res.send(tasks);\r\n    })\r\n});\r\n\r\n/**\r\n * POST /admin/:userId/lists/:listId/tasks\r\n * Purpose: Create a new task in a specific list\r\n */\r\napp.post('/admin/:userId/lists/:listId/tasks', authenticateAdmin, (req, res) => {\r\n    // We want to create a new task in a list specified by listId\r\n\r\n    List.findOne({\r\n        _id: req.params.listId,\r\n        _userId: req.params.userId\r\n    }).then((list) => {\r\n        if(list) {\r\n            // list object with spec. conditions valid\r\n            // currently authenticated user can create new tasks\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }).then((canCreateTask) => {\r\n        if(canCreateTask) {\r\n            let newTask = new Task({\r\n                title: req.body.title,\r\n                _listId: req.params.listId\r\n            });\r\n            newTask.save().then((newTaskDoc) => {\r\n                res.send(newTaskDoc);\r\n            })\r\n        }\r\n        else {\r\n            res.sendStatus(404);\r\n        }\r\n    })   \r\n})\r\n\r\n/**\r\n * PATCH /admin/:userId/lists/:listId/tasks/:taskId\r\n * Purpose: Update an existing task\r\n */\r\napp.patch('/admin/:userId/lists/:listId/tasks/:taskId', authenticateAdmin, (req, res) => {\r\n    // We want to update an existing task (specified by taskId)\r\n\r\n    List.findOne({\r\n        _id: req.params.listId,\r\n        _userId: req.params.userId\r\n    }).then((list) => {\r\n        if(list) {\r\n            // list object with spec. conditions valid\r\n            // currently authenticated user can update tasks within list\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }).then((canUpdateTasks) => {\r\n        if (canUpdateTasks){\r\n            Task.findOneAndUpdate({\r\n                _id: req.params.taskId,\r\n                _listId: req.params.listId\r\n            }, {\r\n                    $set: req.body\r\n                }\r\n            ).then(() => {\r\n                res.send({ message: 'Updated successfully.' })\r\n            })\r\n        } else {\r\n            res.sendStatus(404);\r\n        }\r\n    })\r\n\r\n                \r\n            });\r\n\r\n/**\r\n * DELETE /admin/:userId/lists/:listId/tasks/:taskId\r\n * Purpose: Delete a task\r\n */\r\napp.delete('/admin/:userId/lists/:listId/tasks/:taskId', authenticateAdmin, (req, res) => {\r\n\r\n    List.findOne({\r\n        _id: req.params.listId,\r\n        _userId: req.params.userId\r\n    }).then((list) => {\r\n        if(list) {\r\n            // list object with spec. conditions valid\r\n            // currently authenticated user can update tasks within list\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }).then((canUpdateTasks) => {\r\n        if (canUpdateTasks) {\r\n            Task.findOneAndRemove({\r\n                _id: req.params.taskId,\r\n                _listId: req.params.listId\r\n            }).then((removedTaskDoc) => {\r\n                res.send(removedTaskDoc);\r\n            })\r\n        \r\n    } else {\r\n        res.sendStatus(404);\r\n    }})\r\n        }\r\n\r\n    );\r\n\r\n/* HELPER METHODS */\r\n\r\nlet deleteTasksFromList = (_listId) => {\r\n    Task.deleteMany({\r\n        _listId\r\n    }).then(() => {\r\n        console.log(\"Tasks from \" + _listId + \"were deleted.\");\r\n    });\r\n}\r\n\r\n// After your API routes\r\n// Serve static assets (Angular frontend) in production\r\nif (process.env.NODE_ENV === 'production') {\r\n    // Set static folder\r\n    app.use(express.static(path.join(__dirname, 'dist')));\r\n\r\n    // Handle Angular routing by returning 'index.html' for all routes not recognized by the Express app\r\n    app.get('*', (req, res) => {\r\n        console.log(__dirname)\r\n        res.sendFile(path.resolve(__dirname, 'dist', 'index.html'));\r\n    });    \r\n}\r\n\r\n\r\nvar server= app.listen(3000, () => {\r\n    console.log('Server is listening on port 3000 in  '+ process.env.NODE_ENV + ' mode');\r\n})\r\nmodule.exports = server;"]}