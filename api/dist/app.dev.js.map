{"version":3,"sources":["app.js"],"names":["express","require","app","mongoose","bodyParser","List","Task","User","jwt","swaggerUi","swaggerJsdoc","path","cors","use","options","swaggerDefinition","openapi","info","title","version","components","securitySchemes","bearerAuth","type","scheme","bearerFormat","security","apis","swaggerSpecs","serve","setup","json","req","res","next","header","authenticate","token","verify","getJWTSecret","err","decoded","status","send","user_id","_id","authenticateAdmin","findById","then","user","checkIfAdmin","verifySession","refreshToken","findByIdAndToken","Promise","reject","userObject","isSessionValid","sessions","forEach","session","hasRefreshTokenExpired","expiresAt","e","get","find","_userId","lists","post","body","newList","save","listDoc","patch","findOneAndUpdate","params","id","$set","findOneAndRemove","removedListDoc","deleteTasksFromList","_listId","listId","tasks","findOne","list","canCreateTask","newTask","newTaskDoc","sendStatus","canUpdateTasks","taskId","message","removedTaskDoc","newUser","createSession","generateAccessAuthToken","accessToken","authTokens","email","password","findByCredentials","put","userId","changePw","users","changeEmail","newEmail","makeAdmin","deletedUser","deleteMany","console","log","process","env","NODE_ENV","join","__dirname","sendFile","resolve","server","listen","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst app = express();\r\nconst { mongoose } = require('./db/mongoose');\r\nconst bodyParser = require('body-parser');\r\nconst { List, Task , User } = require('./db/models');\r\nconst jwt = require('jsonwebtoken');\r\nconst swaggerUi = require(\"swagger-ui-express\");\r\nconst swaggerJsdoc = require(\"swagger-jsdoc\");\r\nconst path = require('path');\r\n\r\nvar cors = require('cors');\r\napp.use(cors())\r\n\r\nconst options = {\r\n  swaggerDefinition: {\r\n    openapi: \"3.0.1\",\r\n    info: {\r\n      title: \"TaskManager in swagger\",\r\n      version: \"1.0.0\",\r\n    },\r\n      components: {\r\n      securitySchemes: {\r\n        bearerAuth: {\r\n          type: \"http\",\r\n          scheme: \"bearer\",\r\n           in: \"header\",\r\n          bearerFormat: \"JWT\",\r\n        },\r\n      },\r\n    },\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n  },\r\n  apis: [\"app.js\"],\r\n};\r\n\r\nconst swaggerSpecs = swaggerJsdoc(options);\r\napp.use(\"/api-docs\", swaggerUi.serve, swaggerUi.setup(swaggerSpecs));\r\n\r\n/* MIDDLEWARE  */\r\n\r\n// Load middleware\r\napp.use(bodyParser.json());\r\n\r\n// CORS HEADERS MIDDLEWARE\r\napp.use(function (req, res, next) {\r\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n    res.header(\"Access-Control-Allow-Methods\", \"GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE\");\r\n    res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, x-access-token, x-refresh-token, _id\");\r\n\r\n    res.header(\r\n        'Access-Control-Expose-Headers',\r\n        'x-access-token, x-refresh-token'\r\n    );\r\n\r\n    next();\r\n});\r\n\r\n\r\n// check whether the request has a valid JWT access token\r\nlet authenticate = (req, res, next) => {\r\n    let token = req.header('x-access-token');\r\n    \r\n    // verify the JWT\r\n    jwt.verify(token, User.getJWTSecret(), (err, decoded) => {\r\n        if (err) {\r\n            // there was an error\r\n            // jwt is invalid - * DO NOT AUTHENTICATE *\r\n            res.status(401).send(err);\r\n        } else {\r\n            // jwt is valid\r\n            req.user_id = decoded._id;\r\n            next();\r\n        }\r\n    });\r\n}\r\n\r\n// check whether the request has a valid admin JWT access token\r\nlet authenticateAdmin = (req, res, next) => {\r\n    let token = req.header('x-access-token');\r\n    \r\n    // verify the JWT\r\n    jwt.verify(token, User.getJWTSecret(), (err, decoded) => {\r\n        if (err) {\r\n            // there was an error\r\n            // jwt is invalid - * DO NOT AUTHENTICATE *\r\n            res.status(401).send(err);\r\n        } else {\r\n            // jwt is valid\r\n            req.user_id = decoded._id;\r\n            User.findById(req.user_id).then((user) => {\r\n                if (!user.checkIfAdmin()){\r\n                    // return Promise.reject({\r\n                        // 'error' : 'User does not have admin privileges!!'\r\n                    // });\r\n                    // there was an error\r\n                    // jwt is invalid - * DO NOT AUTHENTICATE *\r\n                    res.status(401).send(\"User does not have admin privileges!!\");\r\n                }\r\n                else{\r\n                    next();\r\n                    // return Promise.resolve();\r\n                }\r\n            })\r\n        }\r\n    });\r\n}\r\n\r\n// Verify Refresh Token Middleware (which will be verifying the session)\r\nlet verifySession = (req, res, next) => {\r\n    // grab the refresh token from the request header\r\n    let refreshToken = req.header('x-refresh-token');\r\n\r\n    // grab the _id from the request header\r\n    let _id = req.header('_id');\r\n\r\n    User.findByIdAndToken(_id, refreshToken).then((user) => {\r\n        if (!user) {\r\n            // user couldn't be found\r\n            return Promise.reject({\r\n                'error': 'User not found. Make sure that the refresh token and user id are correct'\r\n            });\r\n        }\r\n\r\n         // if the code reaches here - the user was found\r\n        // therefore the refresh token exists in the database - but we still have to check if it has expired or not\r\n\r\n        req.user_id = user._id;\r\n        req.userObject = user;\r\n        req.refreshToken = refreshToken;\r\n\r\n        let isSessionValid = false;\r\n\r\n        user.sessions.forEach((session) => {\r\n            if (session.token === refreshToken) {\r\n                // check if the session has expired\r\n                if (User.hasRefreshTokenExpired(session.expiresAt) === false) {\r\n                    // refresh token has not expired\r\n                    isSessionValid = true;\r\n                }\r\n            }\r\n        });\r\n\r\n        if (isSessionValid) {\r\n            // the session is VALID - call next() to continue with processing this web request\r\n            next();\r\n        } else {\r\n            // the session is not valid\r\n            return Promise.reject({\r\n                'error': 'Refresh token has expired or the session is invalid'\r\n            })\r\n        }\r\n\r\n    }).catch((e) => {\r\n        res.status(401).send(e);\r\n    })\r\n}\r\n\r\n/* END MIDDLEWARE  */\r\n\r\n\r\n /**\r\n * @swagger\r\n * /lists:\r\n *    get:\r\n *      tags:\r\n *        - Lists\r\n *      description: Get List\r\n *      summary: Get List\r\n *      responses:\r\n *          lists:\r\n *              description: This is the default response for it\r\n  */\r\n\r\n/* LIST ROUTES */ \r\n/**\r\n * GET /lists\r\n * Purpose: Get all lists\r\n */\r\napp.get('/lists', authenticate, (req, res) => {\r\n// We want to return an array of all the lists in the database that belong to the authenticated user\r\n\t\r\n    List.find({\r\n        _userId: req.user_id\r\n    }).then((lists) => {\r\n        res.send(lists);\r\n       }).catch((e) => {\r\n        res.send(e);\r\n});\r\n})\r\n\r\n/**\r\n * @swagger\r\n * /lists:\r\n *    post:\r\n *      tags:\r\n *        - Lists\r\n *      description: Create New List\r\n *      summary: Create New List\r\n *      requestBody:\r\n *        required: true\r\n *        content:\r\n *          application/json:\r\n *            schema:\r\n *              type: object\r\n *              properties:\r\n *                _userId:\r\n *                  type: string\r\n *                  description: enter your userId\r\n *                title:\r\n *                  type: string\r\n *                  description: enter your List Title\r\n  *      responses:\r\n *        200:\r\n *          description: Successfully created ;ist\r\n *          content:\r\n *            application/json:\r\n *              schema:\r\n *                type: object\r\n *                properties:\r\n *                  description:\r\n *                    type: string\r\n *               \r\n *                \r\n */           \r\n/**\r\n\r\n/**\r\n * post /lists\r\n * Purpose: create a new list\r\n */\r\n\r\napp.post('/lists', authenticate, (req, res) => {\r\n// We want to create a new list and return the new list document back to the user (which includes the id)\r\n    // The list information (fields) will be passed in via the JSON request body\t\r\n    let title = req.body.title;\r\n\r\n    let newList = new List({\r\n        title,\r\n        _userId: req.user_id\r\n          });\r\n\r\n    newList.save().then((listDoc) => {\r\n        // the full list document is returned (incl. id)\r\n        res.send(listDoc);\r\n    })\r\n    });\r\n\r\n    /**\r\n * PATCH /lists/:id\r\n * Purpose: Update a specified list\r\n */\r\napp.patch('/lists/:id', authenticate, (req, res) => {\r\n    // We want to update the specified list (list document with id in the URL) with the new values specified in the JSON body of the request\r\n   List.findOneAndUpdate({ _id: req.params.id, _userId: req.user_id }, {\r\n        $set: req.body\r\n    }).then(() => {\r\n        res.send({ 'message': 'updated successfully'});\r\n    });\r\n\r\n    });\r\n\r\n\r\n    /**\r\n * @swagger\r\n * /lists/:id:\r\n *    delete:\r\n *      tags:\r\n *        - Delete\r\n *      summary: Remove List API  \r\n *      parameters:\r\n *        - name: id\r\n *          in: path\r\n *          required: true\r\n *          description: List id\r\n *          schema:\r\n *            type: string\r\n *      responses:\r\n *        200:\r\n *          description: Successfully deleted data\r\n *          content:\r\n *            application/json:\r\n *              schema:\r\n *                type: object\r\n *                properties:\r\n *                  description:\r\n *                    type: string \r\n *                    example: Successfully deleted data! \r\n */\r\n\r\n\r\n   /**\r\n * DELETE /lists/:id\r\n * Purpose: Delete a list\r\n */\r\napp.delete('/lists/:id', authenticate, (req, res) => {\r\n    // We want to delete the specified list (document with id in the URL)\r\n    List.findOneAndRemove({\r\n        _id: req.params.id,\r\n        _userId: req.user_id\r\n           }).then((removedListDoc) => {\r\n        res.send(removedListDoc);\r\n\r\n        // delete all tasks in deleted list\r\n        deleteTasksFromList(removedListDoc._id);\r\n\r\n           })\r\n});\r\n\r\n/**\r\n * GET /lists/:listId/tasks\r\n * Purpose: Get all tasks in a specific list\r\n */\r\napp.get('/lists/:listId/tasks', authenticate, (req, res) => {\r\n    // We want to return all tasks that belong to a specific list (specified by listId)\r\n    Task.find({\r\n        _listId: req.params.listId\r\n    }).then((tasks) => {\r\n        res.send(tasks);\r\n    })\r\n});\r\n\r\n\r\n/**\r\n * @swagger\r\n * /lists/:listId/tasks:\r\n *    post:\r\n *      tags:\r\n *        - Tasks\r\n *      description: Create New Task\r\n *      summary: Create New Task\r\n *      requestHeader:\r\n *        required: true\r\n *        content:\r\n *          application/json:\r\n *            schema:\r\n *              type: object\r\n *              properties:\r\n *                _listId:\r\n *                  type: string\r\n *      requestBody:\r\n *        required: true\r\n *        content:\r\n *          application/json:\r\n *            schema:\r\n *              type: object\r\n *              properties:\r\n *                _listId:\r\n *                  type: string\r\n *                  description: enter your listId\r\n *                title:\r\n *                  type: string\r\n *                  description: enter your task Title\r\n  *      responses:\r\n *        200:\r\n *          description: Successfully created Task\r\n *          content:\r\n *            application/json:\r\n *              schema:\r\n *                type: object\r\n *                properties:\r\n *                  description:\r\n *                    type: string\r\n *                    example: Successfully created Task! \r\n */           \r\n\r\n/**\r\n * POST /lists/:listId/tasks\r\n * Purpose: Create a new task in a specific list\r\n */\r\napp.post('/lists/:listId/tasks', authenticate, (req, res) => {\r\n    // We want to create a new task in a list specified by listId\r\n\r\n    List.findOne({\r\n        _id: req.params.listId,\r\n        _userId: req.user_id\r\n    }).then((list) => {\r\n        if(list) {\r\n            // list object with spec. conditions valid\r\n            // currently authenticated user can create new tasks\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }).then((canCreateTask) => {\r\n        if(canCreateTask) {\r\n            let newTask = new Task({\r\n                title: req.body.title,\r\n                _listId: req.params.listId\r\n            });\r\n            newTask.save().then((newTaskDoc) => {\r\n                res.send(newTaskDoc);\r\n            })\r\n        }\r\n        else {\r\n            res.sendStatus(404);\r\n        }\r\n    })\r\n})\r\n\r\n/**\r\n * PATCH /lists/:listId/tasks/:taskId\r\n * Purpose: Update an existing task\r\n */\r\napp.patch('/lists/:listId/tasks/:taskId', authenticate, (req, res) => {\r\n    // We want to update an existing task (specified by taskId)\r\n\r\n    List.findOne({\r\n        _id: req.params.listId,\r\n        _userId: req.user_id\r\n    }).then((list) => {\r\n        if(list) {\r\n            // list object with spec. conditions valid\r\n            // currently authenticated user can update tasks within list\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }).then((canUpdateTasks) => {\r\n        if (canUpdateTasks){\r\n            Task.findOneAndUpdate({\r\n                _id: req.params.taskId,\r\n                _listId: req.params.listId\r\n            }, {\r\n                    $set: req.body\r\n                }\r\n            ).then(() => {\r\n                res.send({ message: 'Updated successfully.' })\r\n            })\r\n        } else {\r\n            res.sendStatus(404);\r\n        }\r\n    })\r\n\r\n                \r\n          });\r\n/**\r\n * @swagger\r\n * lists/:listId/tasks/:\r\n *    delete:\r\n *      tags:\r\n *        - Delete\r\n *      summary: Remove Task API  \r\n *      parameters:\r\n *        - name: Taskid\r\n *          in: path\r\n *          required: true\r\n *          description: Task id\r\n *          schema:\r\n *            type: string\r\n  *        - name: Listid\r\n *          in: path\r\n *          required: true\r\n *          description: list id\r\n *          schema:\r\n *            type: string\r\n *      responses:\r\n *        200:\r\n *          description: Successfully deleted task\r\n *          content:\r\n *            application/json:\r\n *              schema:\r\n *                type: object\r\n *                properties:\r\n *                  description:\r\n *                    type: string\r\n *                    example: Successfully deleted task!     \r\n */\r\n\r\n\r\n\r\n/**\r\n * DELETE /lists/:listId/tasks/:taskId\r\n * Purpose: Delete a task\r\n */\r\napp.delete('/lists/:listId/tasks/:taskId', authenticate, (req, res) => {\r\n\r\n    List.findOne({\r\n        _id: req.params.listId,\r\n        _userId: req.user_id\r\n    }).then((list) => {\r\n        if(list) {\r\n            // list object with spec. conditions valid\r\n            // currently authenticated user can update tasks within list\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }).then((canUpdateTasks) => {\r\n        if (canUpdateTasks) {\r\n            Task.findOneAndRemove({\r\n                _id: req.params.taskId,\r\n                _listId: req.params.listId\r\n            }).then((removedTaskDoc) => {\r\n                res.send(removedTaskDoc);\r\n            })\r\n        \r\n    } else {\r\n        res.sendStatus(404);\r\n    }})\r\n        }\r\n\r\n    );\r\n    \r\n/* USER ROUTES */\r\n\r\n/**\r\n * @swagger\r\n * /users:\r\n *    post:\r\n *      tags:\r\n *        - Users\r\n *      description: Create users API\r\n *      summary: Create users data\r\n *      requestBody:\r\n *        required: true\r\n *        content:\r\n *          application/json:\r\n *            schema:\r\n *              type: object\r\n *              properties:\r\n *                email:\r\n *                  type: string\r\n *                  description: enter your username\r\n *                password:\r\n *                  type: string\r\n *                  description: enter your password\r\n  *      responses:\r\n *        200:\r\n *          description: Successfully created User\r\n *          content:\r\n *            application/json:\r\n *              schema:\r\n *                type: object\r\n *                properties:\r\n *                  description:\r\n *                    type: string\r\n *                    example: Successfully created User! \r\n *                \r\n */           \r\n\r\n/**\r\n * POST /users\r\n * Purpose: Sign up\r\n */\r\napp.post('/users', (req, res) => {\r\n    // User sign up\r\n\r\n    let body = req.body;\r\n    let newUser = new User(body);\r\n\r\n    newUser.save().then(() => {\r\n        return newUser.createSession();\r\n    }).then((refreshToken) => {\r\n        // Session created successfully - refreshToken returned.\r\n        // now we geneate an access auth token for the user\r\n\r\n        return newUser.generateAccessAuthToken().then((accessToken) => {\r\n            // access auth token generated successfully, now we return an object containing the auth tokens\r\n            return { accessToken, refreshToken }\r\n        });\r\n    }).then((authTokens) => {\r\n        // Now we construct and send the response to the user with their auth tokens in the header and the user object in the body\r\n        res\r\n            .header('x-refresh-token', authTokens.refreshToken)\r\n            .header('x-access-token', authTokens.accessToken)\r\n            .send(newUser);\r\n    }).catch((e) => {\r\n        res.status(400).send(e);\r\n    })\r\n})\r\n\r\n /**\r\n * @swagger\r\n * /users/login/:\r\n *    post:\r\n *      tags:\r\n *        - Users\r\n *      description: Login and Get Access Token\r\n *      summary: Login and Get Access Token\r\n *      requestBody:\r\n *        required: true\r\n *        content:\r\n *          application/json:\r\n *            schema:\r\n *              type: object\r\n *              properties:\r\n *                email:\r\n *                  type: string\r\n *                  description: enter your username\r\n *                password:\r\n *                  type: string\r\n *                  description: enter your password\r\n  *      responses:\r\n *        200:\r\n *          description: Successfully Logged in\r\n *          content:\r\n *            application/json:\r\n *              schema:\r\n *                type: object\r\n *                properties:\r\n *                  description:\r\n *                    type: string\r\n *                    example: Successfully Logged in!\r\n *                \r\n */           \r\n\r\n/**\r\n * POST /users/login\r\n * Purpose: Login\r\n */\r\napp.post('/users/login', (req, res) => {\r\n    let email = req.body.email;\r\n    let password = req.body.password;\r\n\r\n    User.findByCredentials(email, password).then((user) => {\r\n        return user.createSession().then((refreshToken) => {\r\n            // Session created successfully - refreshToken returned.\r\n            // now we geneate an access auth token for the user\r\n\r\n            return user.generateAccessAuthToken().then((accessToken) => {\r\n                // access auth token generated successfully, now we return an object containing the auth tokens\r\n                return { accessToken, refreshToken }\r\n            });\r\n        }).then((authTokens) => {\r\n            // Now we construct and send the response to the user with their auth tokens in the header and the user object in the body\r\n            res\r\n                .header('x-refresh-token', authTokens.refreshToken)\r\n                .header('x-access-token', authTokens.accessToken)\r\n                .send(user);\r\n        })\r\n    }).catch((e) => {\r\n        res.status(400).send(e);\r\n    });\r\n})\r\n\r\n/**\r\n * GET /users/me/access-token\r\n * Purpose: generates and returns an access token\r\n */\r\napp.get('/users/me/access-token', verifySession, (req, res) => {\r\n    // we know that the user/caller is authenticated and we have the user_id and user object available to us\r\n    req.userObject.generateAccessAuthToken().then((accessToken) => {\r\n        res.header('x-access-token', accessToken).send({ accessToken });\r\n    }).catch((e) => {\r\n        res.status(400).send(e);\r\n    });\r\n})\r\n\r\n/**\r\n * PUT /users/:userId\r\n * Purpose: change password\r\n */\r\napp.put('/users/:userId', authenticate, (req, res) => {\r\n    // we authenticate before allowing change pw\r\n\r\n    User.findOne({\r\n        _id: req.params.userId\r\n    }).then((user) => {\r\n        user.changePw(req.body.password);\r\n        // console.log(\"and back here as well\");\r\n        res.sendStatus(200);\r\n    })\r\n})\r\n\r\n/**\r\n * ONLY FOR TESTING PURPOSES\r\n * GET /users/:userId\r\n * Purpose: view password\r\n */\r\napp.get('/users/:userId', (req, res) => {\r\n    // for testing change pw feature\r\n\r\n    User.findOne({\r\n        _id: req.params.userId\r\n    }).then((user) => {\r\n        body = {\r\n            \"email\": user.email,\r\n            \"password\": user.password\r\n        }\r\n        res.send(body);\r\n    })\r\n\r\n})\r\n\r\n/* ADMIN ROUTES */\r\n\r\n/**\r\n * GET /admin\r\n * Purpose: check if user is admin\r\n */\r\napp.get('/admin', authenticateAdmin, (req, res) => {\r\n    // authenticateAdmin does all the work\r\n    res.status(200).send(\"User has admin privileges.\");\r\n})\r\n\r\n/**\r\n * GET /users\r\n * Purpose: get all users\r\n */\r\napp.get('/users', authenticateAdmin, (req, res) => {\r\n    // for retrieving all users\r\n    User.find({}).then((users) => {\r\n        res.send(users);\r\n    })\r\n})\r\n\r\n/**\r\n * PUT admin/users/:userId/change-password\r\n * Purpose: admin change password\r\n */\r\napp.put('/admin/users/:userId/change-password', authenticateAdmin, (req, res) => {\r\n    // we authenticate admin before allowing change pw\r\n\r\n    User.findOne({\r\n        _id: req.params.userId\r\n    }).then((user) => {\r\n        user.changePw(req.body.password);\r\n        // console.log(\"and back here as well\");\r\n        res.status(200).send(user);\r\n    })\r\n})\r\n\r\n/**\r\n * PUT admin/users/:userId/change-email\r\n * Purpose: admin change email\r\n */\r\napp.put('/admin/users/:userId/change-email', authenticateAdmin, (req, res) => {\r\n    // we authenticate admin before allowing change email\r\n    User.findOne({\r\n        _id: req.params.userId\r\n    }).then((user) => {\r\n        user.changeEmail(req.body.newEmail);\r\n        // console.log(\"and back here as well\");\r\n        res.status(200).send(user);\r\n    })\r\n})\r\n\r\n/**\r\n * POST admin/users/:userId/make-admin\r\n * Purpose: make user admin\r\n */\r\napp.post('/admin/users/:userId/make-admin', authenticateAdmin, (req, res) => {\r\n    // we authenticate admin before allowing make admin\r\n    User.findOne({\r\n        _id: req.params.userId\r\n    }).then((user) => {\r\n        user.makeAdmin();\r\n        // console.log(\"and back here as well\");\r\n        res.status(200).send(user);\r\n    })\r\n})\r\n\r\n/**\r\n * DELETE /users/:userId\r\n * Purpose: delete user\r\n */\r\napp.delete('/admin/users/:userId/delete-user', authenticateAdmin, (req, res) => {\r\n    // we authenticate admin before allowing change email\r\n    User.findOneAndRemove({\r\n        _id: req.params.userId\r\n    }).then((deletedUser) => {\r\n        res.send(deletedUser);\r\n    })\r\n})\r\n\r\n/* ADMIN LIST ROUTES */\r\n\r\n/**\r\n * GET /admin/:userId/lists\r\n * Purpose: Get all lists\r\n */\r\napp.get('/admin/:userId/lists', authenticateAdmin, (req, res) => {\r\n    // We want to return an array of all the lists in the database that belong to the user\r\n        \r\n        List.find({\r\n            _userId: req.params.userId\r\n        }).then((lists) => {\r\n            res.send(lists);\r\n           }).catch((e) => {\r\n            res.send(e);\r\n    });\r\n})\r\n    \r\n/**\r\n * POST /admin/:userId/lists\r\n * Purpose: create a new list\r\n */\r\n\r\napp.post('/admin/:userId/lists', authenticateAdmin, (req, res) => {\r\n// We want to create a new list and return the new list document back to the user (which includes the id)\r\n    // The list information (fields) will be passed in via the JSON request body\t\r\n    let title = req.body.title;\r\n\r\n    let newList = new List({\r\n        title,\r\n        _userId: req.params.userId\r\n            });\r\n\r\n    newList.save().then((listDoc) => {\r\n        // the full list document is returned (incl. id)\r\n        res.send(listDoc);\r\n    })\r\n    });\r\n\r\n/**\r\n * PATCH /admin/:userId/lists/:id\r\n * Purpose: Update a specified list\r\n */\r\napp.patch('/admin/:userId/lists/:id', authenticateAdmin, (req, res) => {\r\n    // We want to update the specified list (list document with id in the URL) with the new values specified in the JSON body of the request\r\n    List.findOneAndUpdate({ _id: req.params.id, _userId: req.params.userId }, {\r\n        $set: req.body\r\n    }).then(() => {\r\n        res.send({ 'message': 'updated successfully'});\r\n    });\r\n\r\n    });\r\n\r\n/**\r\n * DELETE /admin/:userId/lists/:id\r\n * Purpose: Delete a list\r\n */\r\napp.delete('/admin/:userId/lists/:id', authenticateAdmin, (req, res) => {\r\n    // We want to delete the specified list (document with id in the URL)\r\n    List.findOneAndRemove({\r\n        _id: req.params.id,\r\n        _userId: req.params.userId\r\n            }).then((removedListDoc) => {\r\n        res.send(removedListDoc);\r\n\r\n        // delete all tasks in deleted list\r\n        deleteTasksFromList(removedListDoc._id);\r\n\r\n            })\r\n});\r\n\r\n/**\r\n * GET /admin/:userId/lists/:listId/tasks\r\n * Purpose: Get all tasks in a specific list\r\n */\r\napp.get('/admin/lists/:listId/tasks', authenticateAdmin, (req, res) => {\r\n    // We want to return all tasks that belong to a specific list (specified by listId)\r\n    Task.find({\r\n        _listId: req.params.listId\r\n    }).then((tasks) => {\r\n        res.send(tasks);\r\n    })\r\n});\r\n\r\n/**\r\n * POST /admin/:userId/lists/:listId/tasks\r\n * Purpose: Create a new task in a specific list\r\n */\r\napp.post('/admin/:userId/lists/:listId/tasks', authenticateAdmin, (req, res) => {\r\n    // We want to create a new task in a list specified by listId\r\n\r\n    List.findOne({\r\n        _id: req.params.listId,\r\n        _userId: req.params.userId\r\n    }).then((list) => {\r\n        if(list) {\r\n            // list object with spec. conditions valid\r\n            // currently authenticated user can create new tasks\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }).then((canCreateTask) => {\r\n        if(canCreateTask) {\r\n            let newTask = new Task({\r\n                title: req.body.title,\r\n                _listId: req.params.listId\r\n            });\r\n            newTask.save().then((newTaskDoc) => {\r\n                res.send(newTaskDoc);\r\n            })\r\n        }\r\n        else {\r\n            res.sendStatus(404);\r\n        }\r\n    })   \r\n})\r\n\r\n/**\r\n * PATCH /admin/:userId/lists/:listId/tasks/:taskId\r\n * Purpose: Update an existing task\r\n */\r\napp.patch('/admin/:userId/lists/:listId/tasks/:taskId', authenticateAdmin, (req, res) => {\r\n    // We want to update an existing task (specified by taskId)\r\n\r\n    List.findOne({\r\n        _id: req.params.listId,\r\n        _userId: req.params.userId\r\n    }).then((list) => {\r\n        if(list) {\r\n            // list object with spec. conditions valid\r\n            // currently authenticated user can update tasks within list\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }).then((canUpdateTasks) => {\r\n        if (canUpdateTasks){\r\n            Task.findOneAndUpdate({\r\n                _id: req.params.taskId,\r\n                _listId: req.params.listId\r\n            }, {\r\n                    $set: req.body\r\n                }\r\n            ).then(() => {\r\n                res.send({ message: 'Updated successfully.' })\r\n            })\r\n        } else {\r\n            res.sendStatus(404);\r\n        }\r\n    })\r\n\r\n                \r\n            });\r\n\r\n/**\r\n * DELETE /admin/:userId/lists/:listId/tasks/:taskId\r\n * Purpose: Delete a task\r\n */\r\napp.delete('/admin/:userId/lists/:listId/tasks/:taskId', authenticateAdmin, (req, res) => {\r\n\r\n    List.findOne({\r\n        _id: req.params.listId,\r\n        _userId: req.params.userId\r\n    }).then((list) => {\r\n        if(list) {\r\n            // list object with spec. conditions valid\r\n            // currently authenticated user can update tasks within list\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }).then((canUpdateTasks) => {\r\n        if (canUpdateTasks) {\r\n            Task.findOneAndRemove({\r\n                _id: req.params.taskId,\r\n                _listId: req.params.listId\r\n            }).then((removedTaskDoc) => {\r\n                res.send(removedTaskDoc);\r\n            })\r\n        \r\n    } else {\r\n        res.sendStatus(404);\r\n    }})\r\n        }\r\n\r\n    );\r\n\r\n/* HELPER METHODS */\r\n\r\nlet deleteTasksFromList = (_listId) => {\r\n    Task.deleteMany({\r\n        _listId\r\n    }).then(() => {\r\n        console.log(\"Tasks from \" + _listId + \"were deleted.\");\r\n    });\r\n}\r\n\r\n// After your API routes\r\n// Serve static assets (Angular frontend) in production\r\nif (process.env.NODE_ENV === 'production') {\r\n    // Set static folder\r\n    app.use(express.static(path.join(__dirname, 'dist')));\r\n\r\n    // Handle Angular routing by returning 'index.html' for all routes not recognized by the Express app\r\n    app.get('*', (req, res) => {\r\n        console.log(__dirname)\r\n        res.sendFile(path.resolve(__dirname, 'dist', 'index.html'));\r\n    });    \r\n}\r\n\r\n\r\nvar server= app.listen(3000, () => {\r\n    console.log('Server is listening on port 3000 in  '+ process.env.NODE_ENV + ' mode');\r\n})\r\nmodule.exports = server;"],"file":"app.dev.js"}