"use strict";var express=require("express"),app=express(),_require=require("./db/mongoose"),mongoose=_require.mongoose,bodyParser=require("body-parser"),_require2=require("./db/models"),List=_require2.List,Task=_require2.Task,User=_require2.User,jwt=require("jsonwebtoken"),swaggerUi=require("swagger-ui-express"),swaggerJsdoc=require("swagger-jsdoc"),path=require("path"),cors=require("cors");app.use(cors());var options={swaggerDefinition:{openapi:"3.0.1",info:{title:"TaskManager in swagger",version:"1.0.0"},components:{securitySchemes:{bearerAuth:{type:"http",scheme:"bearer",in:"header",bearerFormat:"JWT"}}},security:[{bearerAuth:[]}]},apis:["app.js"]},swaggerSpecs=swaggerJsdoc(options);app.use("/api-docs",swaggerUi.serve,swaggerUi.setup(swaggerSpecs)),app.use(bodyParser.json()),app.use(function(e,s,n){s.header("Access-Control-Allow-Origin","*"),s.header("Access-Control-Allow-Methods","GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE"),s.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept, x-access-token, x-refresh-token, _id"),s.header("Access-Control-Expose-Headers","x-access-token, x-refresh-token"),n()});var authenticate=function(n,t,i){var e=n.header("x-access-token");jwt.verify(e,User.getJWTSecret(),function(e,s){e?t.status(401).send(e):(n.user_id=s._id,i())})},authenticateAdmin=function(n,t,i){var e=n.header("x-access-token");jwt.verify(e,User.getJWTSecret(),function(e,s){e?t.status(401).send(e):(n.user_id=s._id,User.findById(n.user_id).then(function(e){e.checkIfAdmin()?i():t.status(401).send("User does not have admin privileges!!")}))})},verifySession=function(n,s,t){var i=n.header("x-refresh-token"),e=n.header("_id");User.findByIdAndToken(e,i).then(function(e){if(!e)return Promise.reject({error:"User not found. Make sure that the refresh token and user id are correct"});n.user_id=e._id,n.userObject=e,n.refreshToken=i;var s=!1;if(e.sessions.forEach(function(e){e.token===i&&!1===User.hasRefreshTokenExpired(e.expiresAt)&&(s=!0)}),!s)return Promise.reject({error:"Refresh token has expired or the session is invalid"});t()}).catch(function(e){s.status(401).send(e)})};app.get("/lists",authenticate,function(e,s){List.find({_userId:e.user_id}).then(function(e){s.send(e)}).catch(function(e){s.send(e)})}),app.post("/lists",authenticate,function(e,s){var n=e.body.title;new List({title:n,_userId:e.user_id}).save().then(function(e){s.send(e)})}),app.patch("/lists/:id",authenticate,function(e,s){List.findOneAndUpdate({_id:e.params.id,_userId:e.user_id},{$set:e.body}).then(function(){s.send({message:"updated successfully"})})}),app.delete("/lists/:id",authenticate,function(e,s){List.findOneAndRemove({_id:e.params.id,_userId:e.user_id}).then(function(e){s.send(e),deleteTasksFromList(e._id)})}),app.get("/lists/:listId/tasks",authenticate,function(e,s){Task.find({_listId:e.params.listId}).then(function(e){s.send(e)})}),app.post("/lists/:listId/tasks",authenticate,function(s,n){List.findOne({_id:s.params.listId,_userId:s.user_id}).then(function(e){return!!e}).then(function(e){e?new Task({title:s.body.title,_listId:s.params.listId}).save().then(function(e){n.send(e)}):n.sendStatus(404)})}),app.patch("/lists/:listId/tasks/:taskId",authenticate,function(s,n){List.findOne({_id:s.params.listId,_userId:s.user_id}).then(function(e){return!!e}).then(function(e){e?Task.findOneAndUpdate({_id:s.params.taskId,_listId:s.params.listId},{$set:s.body}).then(function(){n.send({message:"Updated successfully."})}):n.sendStatus(404)})}),app.delete("/lists/:listId/tasks/:taskId",authenticate,function(s,n){List.findOne({_id:s.params.listId,_userId:s.user_id}).then(function(e){return!!e}).then(function(e){e?Task.findOneAndRemove({_id:s.params.taskId,_listId:s.params.listId}).then(function(e){n.send(e)}):n.sendStatus(404)})}),app.post("/users",function(e,s){var n=e.body,t=new User(n);t.save().then(function(){return t.createSession()}).then(function(s){return t.generateAccessAuthToken().then(function(e){return{accessToken:e,refreshToken:s}})}).then(function(e){s.header("x-refresh-token",e.refreshToken).header("x-access-token",e.accessToken).send(t)}).catch(function(e){s.status(400).send(e)})}),app.post("/users/login",function(e,s){var n=e.body.email,t=e.body.password;User.findByCredentials(n,t).then(function(n){return n.createSession().then(function(s){return n.generateAccessAuthToken().then(function(e){return{accessToken:e,refreshToken:s}})}).then(function(e){s.header("x-refresh-token",e.refreshToken).header("x-access-token",e.accessToken).send(n)})}).catch(function(e){s.status(400).send(e)})}),app.get("/users/me/access-token",verifySession,function(e,s){e.userObject.generateAccessAuthToken().then(function(e){s.header("x-access-token",e).send({accessToken:e})}).catch(function(e){s.status(400).send(e)})}),app.put("/users/:userId",authenticate,function(s,n){User.findOne({_id:s.params.userId}).then(function(e){e.changePw(s.body.password),n.sendStatus(200)})}),app.get("/users/:userId",function(e,s){User.findOne({_id:e.params.userId}).then(function(e){body={email:e.email,password:e.password},s.send(body)})}),app.get("/admin",authenticateAdmin,function(e,s){s.status(200).send("User has admin privileges.")}),app.get("/users",authenticateAdmin,function(e,s){User.find({}).then(function(e){s.send(e)})}),app.put("/admin/users/:userId/change-password",authenticateAdmin,function(s,n){User.findOne({_id:s.params.userId}).then(function(e){e.changePw(s.body.password),n.status(200).send(e)})}),app.put("/admin/users/:userId/change-email",authenticateAdmin,function(s,n){User.findOne({_id:s.params.userId}).then(function(e){e.changeEmail(s.body.newEmail),n.status(200).send(e)})}),app.post("/admin/users/:userId/make-admin",authenticateAdmin,function(e,s){User.findOne({_id:e.params.userId}).then(function(e){e.makeAdmin(),s.status(200).send(e)})}),app.delete("/admin/users/:userId/delete-user",authenticateAdmin,function(e,s){User.findOneAndRemove({_id:e.params.userId}).then(function(e){s.send(e)})}),app.get("/admin/:userId/lists",authenticateAdmin,function(e,s){List.find({_userId:e.params.userId}).then(function(e){s.send(e)}).catch(function(e){s.send(e)})}),app.post("/admin/:userId/lists",authenticateAdmin,function(e,s){var n=e.body.title;new List({title:n,_userId:e.params.userId}).save().then(function(e){s.send(e)})}),app.patch("/admin/:userId/lists/:id",authenticateAdmin,function(e,s){List.findOneAndUpdate({_id:e.params.id,_userId:e.params.userId},{$set:e.body}).then(function(){s.send({message:"updated successfully"})})}),app.delete("/admin/:userId/lists/:id",authenticateAdmin,function(e,s){List.findOneAndRemove({_id:e.params.id,_userId:e.params.userId}).then(function(e){s.send(e),deleteTasksFromList(e._id)})}),app.get("/admin/lists/:listId/tasks",authenticateAdmin,function(e,s){Task.find({_listId:e.params.listId}).then(function(e){s.send(e)})}),app.post("/admin/:userId/lists/:listId/tasks",authenticateAdmin,function(s,n){List.findOne({_id:s.params.listId,_userId:s.params.userId}).then(function(e){return!!e}).then(function(e){e?new Task({title:s.body.title,_listId:s.params.listId}).save().then(function(e){n.send(e)}):n.sendStatus(404)})}),app.patch("/admin/:userId/lists/:listId/tasks/:taskId",authenticateAdmin,function(s,n){List.findOne({_id:s.params.listId,_userId:s.params.userId}).then(function(e){return!!e}).then(function(e){e?Task.findOneAndUpdate({_id:s.params.taskId,_listId:s.params.listId},{$set:s.body}).then(function(){n.send({message:"Updated successfully."})}):n.sendStatus(404)})}),app.delete("/admin/:userId/lists/:listId/tasks/:taskId",authenticateAdmin,function(s,n){List.findOne({_id:s.params.listId,_userId:s.params.userId}).then(function(e){return!!e}).then(function(e){e?Task.findOneAndRemove({_id:s.params.taskId,_listId:s.params.listId}).then(function(e){n.send(e)}):n.sendStatus(404)})});var deleteTasksFromList=function(e){Task.deleteMany({_listId:e}).then(function(){console.log("Tasks from "+e+"were deleted.")})};"production"===process.env.NODE_ENV&&(app.use(express.static(path.join(__dirname,"dist"))),app.get("*",function(e,s){console.log(__dirname),s.sendFile(path.resolve(__dirname,"dist","index.html"))}));var server=app.listen(3e3,function(){console.log("Server is listening on port 3000 in "+process.env.NODE_ENV+" mode")});module.exports=server;
//# sourceMappingURL=app.min.js.map
